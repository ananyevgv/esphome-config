sensor:
  - platform: template                 # Шаблонный, считанный с анемометра Температура потока воздуха
    id: temperature_sensor             # Имя для этого кода
    name: "Temperature"                # Имя для отображения В HA
    icon: mdi:thermometer-high         # Иконка термометра
    device_class: temperature          # Класс Температура
    unit_of_measurement: "°C"          # Указываем еденицы измерения ( только приставка ни на что не влияет )
    update_interval: 5s                # Частота опроса сенсора     
    filters:                           # Подключаем фильтры для данных сенсора
      - sliding_window_moving_average: # Фильтр скользящего среднего по 30 измерениям, каждое 30-е выталкиваем
          window_size: 12              # Размер окна ( накопления данных )
          send_every: 12               # Публиковать каждое 3е значение  
      - delta: 0.1                     # Не публиковать если изменения не более 0,1      
    accuracy_decimals: 1               # Количество знаков после запятой
    lambda: |-
      const int max_attempts = 3; // Максимальное количество попыток
      int attempts = 0;
      while (attempts < max_attempts) {
        Wire.beginTransmission(0x11); // Адрес устройства
        Wire.write(0x10); // Регистр температуры (старший байт)
        Wire.endTransmission(false);
        Wire.requestFrom(0x11, 1); // Чтение старшего байта
        if (Wire.available() == 1) {
          uint8_t high_byte = Wire.read();

          Wire.beginTransmission(0x11); // Адрес устройства
          Wire.write(0x11); // Регистр температуры (младший байт)
          Wire.endTransmission(false);
          Wire.requestFrom(0x11, 1); // Чтение младшего байта
          if (Wire.available() == 1) {
            uint8_t low_byte = Wire.read();
            uint16_t raw_value = (high_byte << 8) | low_byte;
            return raw_value * 0.1; // Масштабирование
          }
        }
        attempts++;
        delay(10); // Небольшая задержка перед следующей попыткой
      }
      return {-0.1}; // Если данные недоступны после всех попыток



  - platform: template                 # Шаблонный, считанный с анемометра Скорость потока воздуха
    id: airflow_rate                   # Имя для этого кода  
    name: "airflow_rate"               # Имя для отображения В HA
    icon: mdi:weather-windy            # Иконка дует ветор
    device_class: wind_speed           # Класс Скорость ветра
    unit_of_measurement: "m/s"         # Указываем еденицы измерения ( только приставка ни на что не влияет )
    update_interval: 5s                # Частота опроса сенсора       
    filters:                           # Подключаем фильтры для данных сенсора
      - sliding_window_moving_average: # Фильтр скользящего среднего по 3 измерениям, каждое 3-е выталкиваем
          window_size: 12              # Размер окна ( накопления данных )
          send_every: 12               # Публиковать каждое 3е значение
      - delta: 0.1                     # Не публиковать если изменения не более 0,1    
    accuracy_decimals: 1               # Количество знаков после запятой
    lambda: |-
      const int max_attempts = 3; // Максимальное количество попыток
      int attempts = 0;
      while (attempts < max_attempts) {
        Wire.beginTransmission(0x11); // Адрес устройства
        Wire.write(0x07); // Регистр температуры (старший байт)
        Wire.endTransmission(false);
        Wire.requestFrom(0x11, 1); // Чтение старшего байта
        if (Wire.available() == 1) {
          uint8_t high_byte = Wire.read();

          Wire.beginTransmission(0x11); // Адрес устройства
          Wire.write(0x08); // Регистр температуры (младший байт)
          Wire.endTransmission(false);
          Wire.requestFrom(0x11, 1); // Чтение младшего байта
          if (Wire.available() == 1) {
            uint8_t low_byte = Wire.read();
            uint16_t raw_value = (high_byte << 8) | low_byte;
            return raw_value * 0.1; // Масштабирование
          }
        }
        attempts++;
        delay(10); // Небольшая задержка перед следующей попыткой
      }
      return {-0.1}; // Если данные недоступны после всех попыток


  - platform: template                 # Шаблонный, считанный с анемометра Скорость потока воздуха
    name: "Min airflow_rate"               # Имя для отображения В HA
    icon: mdi:weather-windy            # Иконка дует ветор
    device_class: wind_speed           # Класс Скорость ветра
    unit_of_measurement: "m/s"         # Указываем еденицы измерения ( только приставка ни на что не влияет )
    update_interval: 5s                # Частота опроса сенсора       
    filters:                           # Подключаем фильтры для данных сенсора
      - sliding_window_moving_average: # Фильтр скользящего среднего по 3 измерениям, каждое 3-е выталкиваем
          window_size: 12              # Размер окна ( накопления данных )
          send_every: 12               # Публиковать каждое 3е значение
      - delta: 0.1                     # Не публиковать если изменения не более 0,1    
    accuracy_decimals: 1               # Количество знаков после запятой
    lambda: |-
      const int max_attempts = 3; // Максимальное количество попыток
      int attempts = 0;
      while (attempts < max_attempts) {
        Wire.beginTransmission(0x11); // Адрес устройства
        Wire.write(0x23); // Регистр температуры (старший байт)
        Wire.endTransmission(false);
        Wire.requestFrom(0x11, 1); // Чтение старшего байта
        if (Wire.available() == 1) {
          uint8_t high_byte = Wire.read();

          Wire.beginTransmission(0x11); // Адрес устройства
          Wire.write(0x24); // Регистр температуры (младший байт)
          Wire.endTransmission(false);
          Wire.requestFrom(0x11, 1); // Чтение младшего байта
          if (Wire.available() == 1) {
            uint8_t low_byte = Wire.read();
            uint16_t raw_value = (high_byte << 8) | low_byte;
            return raw_value * 0.1; // Масштабирование
          }
        }
        attempts++;
        delay(10); // Небольшая задержка перед следующей попыткой
      }
      return {-0.1}; // Если данные недоступны после всех попыток


  - platform: template                 # Шаблонный, считанный с анемометра Скорость потока воздуха
    name: "Max airflow_rate"               # Имя для отображения В HA
    icon: mdi:weather-windy            # Иконка дует ветор
    device_class: wind_speed           # Класс Скорость ветра
    unit_of_measurement: "m/s"         # Указываем еденицы измерения ( только приставка ни на что не влияет )
    update_interval: 5s                # Частота опроса сенсора       
    filters:                           # Подключаем фильтры для данных сенсора
      - sliding_window_moving_average: # Фильтр скользящего среднего по 3 измерениям, каждое 3-е выталкиваем
          window_size: 12              # Размер окна ( накопления данных )
          send_every: 12               # Публиковать каждое 3е значение
      - delta: 0.1                     # Не публиковать если изменения не более 0,1    
    accuracy_decimals: 1               # Количество знаков после запятой
    lambda: |-
      const int max_attempts = 3; // Максимальное количество попыток
      int attempts = 0;
      while (attempts < max_attempts) {
        Wire.beginTransmission(0x11); // Адрес устройства
        Wire.write(0x21); // Регистр температуры (старший байт)
        Wire.endTransmission(false);
        Wire.requestFrom(0x11, 1); // Чтение старшего байта
        if (Wire.available() == 1) {
          uint8_t high_byte = Wire.read();

          Wire.beginTransmission(0x11); // Адрес устройства
          Wire.write(0x22); // Регистр температуры (младший байт)
          Wire.endTransmission(false);
          Wire.requestFrom(0x11, 1); // Чтение младшего байта
          if (Wire.available() == 1) {
            uint8_t low_byte = Wire.read();
            uint16_t raw_value = (high_byte << 8) | low_byte;
            return raw_value * 0.1; // Масштабирование
          }
        }
        attempts++;
        delay(10); // Небольшая задержка перед следующей попыткой
      }
      return {-0.1}; // Если данные недоступны после всех попыток


  - platform: template                     # Шаблонный, Пересчет в кубометры в час 
    name: Расход воздуха                   # Имя для отображения В HA
    icon: "mdi:waves-arrow-right"          # Указываем иконку для отображения в HA
    device_class: VOLUME_FLOW_RATE         # Класс Объемный расход.
    unit_of_measurement: m³/h              # Указываем еденицы измерения ( только приставка ни на что не влияет )
    state_class: measurement               # Класс дачтика "измерение"
    accuracy_decimals: 0                   # Колличество знаков после запятой, вычисляем в лямде скорость ветра умножить на площадь сечения воздуховода и на 3600 секнд ( час )  
    lambda: |-
      return id(airflow_rate).state * 0.0226865 * 3600; // 0.0226865 = расчитанное сечение воздуховода где стоит анемометр в метрах квадратных.



  - platform: template                 # Шаблонный, считанный с анемометра Скорость потока воздуха
    name: "Firmware"               # Имя для отображения В HA
    update_interval: 60s                # Частота опроса сенсора       
    accuracy_decimals: 1               # Количество знаков после запятой
    lambda: |-
      const int max_attempts = 3; // Максимальное количество попыток
      int attempts = 0;
      while (attempts < max_attempts) {
        Wire.beginTransmission(0x11); // Адрес устройства
        Wire.write(0x04); // Регистр firmware
        Wire.endTransmission(false);
        Wire.requestFrom(0x11, 1); // Чтение старшего байта
        if (Wire.available() == 1) {
          uint8_t byte = Wire.read();
          return byte * 0.1; // Масштабирование
        }
        attempts++;
        delay(10); // Небольшая задержка перед следующей попыткой
      }
      return {-0.1}; // Если данные недоступны после всех попыток

  - platform: template                 # Шаблонный, считанный с анемометра Скорость потока воздуха
    name: "ID"               # Имя для отображения В HA
    update_interval: 60s                # Частота опроса сенсора       
    accuracy_decimals: 0             # Количество знаков после запятой
    lambda: |-
      const int max_attempts = 3; // Максимальное количество попыток
      int attempts = 0;
      while (attempts < max_attempts) {
        Wire.beginTransmission(0x11); // Адрес устройства
        Wire.write(0x05); // Регистр id
        Wire.endTransmission(false);
        Wire.requestFrom(0x11, 1); // Чтение старшего байта
        if (Wire.available() == 1) {
          uint8_t byte = Wire.read();
          return byte; // Масштабирование
        }
        attempts++;
        delay(10); // Небольшая задержка перед следующей попыткой
      }
      return {-0.1}; // Если данные недоступны после всех попыток

  - platform: template                 # Шаблонный, считанный с анемометра Скорость потока воздуха
    name: "Power"               # Имя для отображения В HA
    update_interval: 5s                # Частота опроса сенсора       
    accuracy_decimals: 6               # Количество знаков после запятой
    lambda: |-
      const int max_attempts = 3; // Максимальное количество попыток
      int attempts = 0;
      while (attempts < max_attempts) {
        Wire.beginTransmission(0x11); // Адрес устройства
        Wire.write(0x0E); // Регистр id
        Wire.endTransmission(false);
        Wire.requestFrom(0x11, 1); // Чтение старшего байта
        if (Wire.available() == 1) {
          uint8_t byte = Wire.read();
          return (byte * 1.36125) / 255; // Масштабирование
        }
        attempts++;
        delay(10); // Небольшая задержка перед следующей попыткой
      }
      return {-0.1}; // Если данные недоступны после всех попыток

